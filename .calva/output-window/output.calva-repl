; This is the Calva REPL Window.
; It's just a file, really, with some special treatment from Calva.
; Use it as a REPL input prompt if you like. (When the REPL is connected.)
; TIPS: The keyboard shortcut `ctrl+alt+o r` shows and focuses this window
; Please see https://calva.io/repl-window/ for more info.
; Happy coding! ♥️

; TIPS: As with any Clojure file when the REPL is connected:
; - `alt+enter` evaluates the current top level form.
; - `ctrl+enter` evaluates the current form.
; Special for this file:
; - `alt+up` and `alt+down` traverse up and down the REPL command history
;    when the cursor is after the last contents at the prompt
; 
; See also the Calva Inspector: https://calva.io/inspector/

PLEASE NOTE
We will update the default location of this file.
The new default location will be
  "<projectRootPath>/.calva/repl.calva-repl"
For now the legacy path is used by default.
To give yourself a smooth transition, you can opt in
to the change, by configuring this setting as false:
  "calva.useLegacyReplWindowPath"
and then add "**/.calva/repl.calva-repl" to your ".gitignore" file.


This file is configured as the output destination for all REPL output.
You can configure this with the setting:
  "calva.outputDestinations"


; Jacking in...
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Starting Jack-in: (cd /home/dunja/tools_methods_project; lein update-in :dependencies conj '[nrepl,"1.1.1"]' -- update-in :plugins conj '[cider/cider-nrepl,"0.47.1"]' -- update-in '[:repl-options,:nrepl-middleware]' conj '["cider.nrepl/cider-middleware"]' -- repl :headless)
; Using host:port 127.0.0.1:37463 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉tools-methods-project.core꞉> 
"Please see https://calva.io/output/#about-stdout-in-the-repl-window
about why stdout printed to this file is prepended with `;` to be line comments."
clj꞉tools-methods-project.core꞉> 
; Jack-in done.
clj꞉tools-methods-project.core꞉> (def x 4)
#'tools-methods-project.core/x
clj꞉tools-methods-project.core꞉> x
4
clj꞉tools-methods-project.core꞉> 
(x)
; Execution error (ClassCastException) at tools-methods-project.core/eval10360 (form-init5832708808625963143.clj:55).
; class java.lang.Long cannot be cast to class clojure.lang.IFn (java.lang.Long is in module java.base of loader 'bootstrap'; clojure.lang.IFn is in unnamed module of loader 'app')
clj꞉tools-methods-project.core꞉> 
; Evaluating file: core.clj
#'tools-methods-project.core/my-map-recur-next
clj꞉tools-methods-project.core꞉> (= (frequencies [1 1 2 3 2 1 1]) {1 4, 2 2, 3 1})
true
clj꞉tools-methods-project.core꞉> (frequencies [1 1 2 3 2 2 3 3 3 3 3])
{1 2, 2 3, 3 6}
clj꞉tools-methods-project.core꞉> 
; Evaluating file: core.clj
#'tools-methods-project.core/my-frequencies
clj꞉tools-methods-project.core꞉> 
; Evaluating file: core.clj
#'tools-methods-project.core/my-frequencies
clj꞉tools-methods-project.core꞉> 
#'tools-methods-project.core/my-frequencies
clj꞉tools-methods-project.core꞉> (my-frequencies [1 2 1 1 3 3 1 2 1 1 3])
{1 6, 2 2, 3 3}
clj꞉tools-methods-project.core꞉> 
; Evaluating file: core.clj
#'tools-methods-project.core/my-frequencies
clj꞉tools-methods-project.core꞉> 
; Evaluating file: core.clj
#'tools-methods-project.core/my-frequencies-recur
clj꞉tools-methods-project.core꞉> 
; Evaluating file: core.clj
#'tools-methods-project.core/my-frequencies-distinct
clj꞉tools-methods-project.core꞉> 
