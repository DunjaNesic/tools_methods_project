; This is the Calva REPL Window.
; It's just a file, really, with some special treatment from Calva.
; Use it as a REPL input prompt if you like. (When the REPL is connected.)
; TIPS: The keyboard shortcut `ctrl+alt+o r` shows and focuses this window
; Please see https://calva.io/repl-window/ for more info.
; Happy coding! ♥️

; TIPS: As with any Clojure file when the REPL is connected:
; - `alt+enter` evaluates the current top level form.
; - `ctrl+enter` evaluates the current form.
; Special for this file:
; - `alt+up` and `alt+down` traverse up and down the REPL command history
;    when the cursor is after the last contents at the prompt
; 
; See also the Calva Inspector: https://calva.io/inspector/

PLEASE NOTE
We will update the default location of this file.
The new default location will be
  "<projectRootPath>/.calva/repl.calva-repl"
For now the legacy path is used by default.
To give yourself a smooth transition, you can opt in
to the change, by configuring this setting as false:
  "calva.useLegacyReplWindowPath"
and then add "**/.calva/repl.calva-repl" to your ".gitignore" file.


This file is configured as the output destination for all REPL output.
You can configure this with the setting:
  "calva.outputDestinations"


; Jacking in...
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Starting Jack-in: (cd /home/dunja/project/tools_methods_project; lein update-in :dependencies conj '[nrepl,"1.1.1"]' -- update-in :plugins conj '[cider/cider-nrepl,"0.47.1"]' -- update-in '[:repl-options,:nrepl-middleware]' conj '["cider.nrepl/cider-middleware"]' -- repl :headless)
; Using host:port 127.0.0.1:46791 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉tools-methods-project.core꞉> 
"Please see https://calva.io/output/#about-stdout-in-the-repl-window
about why stdout printed to this file is prepended with `;` to be line comments."
clj꞉tools-methods-project.core꞉> 
; Jack-in done.
clj꞉tools-methods-project.core꞉> 
#'tools-methods-project.core/adot
clj꞉tools-methods-project.core꞉> 
; Syntax error compiling at (src/tools_methods_project/core.clj:407:1).
; Unable to resolve symbol: quick-bench in this context
clj꞉tools-methods-project.core꞉> 
nil
clj꞉tools-methods-project.core꞉> 
; Evaluation count : 10086 in 6 samples of 1681 calls.
;              Execution time mean : 65.511640 µs
;     Execution time std-deviation : 7.415940 µs
;    Execution time lower quantile : 56.906597 µs ( 2.5%)
;    Execution time upper quantile : 74.587168 µs (97.5%)
;                    Overhead used : 8.985837 ns
:warn-on-boxed
; 
; Boxed math warning, /home/dunja/project/tools_methods_project/src/tools_methods_project/core.clj:411:15 - call: public static boolean clojure.lang.Numbers.lt(long,java.lang.Object).
clj꞉tools-methods-project.core꞉> 
; Evaluation count : 13386 in 6 samples of 2231 calls.
;              Execution time mean : 46.705056 µs
;     Execution time std-deviation : 1.274476 µs
;    Execution time lower quantile : 45.351618 µs ( 2.5%)
;    Execution time upper quantile : 48.097036 µs (97.5%)
;                    Overhead used : 8.985837 ns
:warn-on-boxed
; 
; Boxed math warning, /home/dunja/project/tools_methods_project/src/tools_methods_project/core.clj:411:15 - call: public static boolean clojure.lang.Numbers.lt(long,java.lang.Object).
clj꞉tools-methods-project.core꞉> 
true
clj꞉tools-methods-project.core-test꞉> 
