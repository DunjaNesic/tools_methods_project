; This is the Calva REPL Window.
; It's just a file, really, with some special treatment from Calva.
; Use it as a REPL input prompt if you like. (When the REPL is connected.)
; TIPS: The keyboard shortcut `ctrl+alt+o r` shows and focuses this window
; Please see https://calva.io/repl-window/ for more info.
; Happy coding! ♥️

; TIPS: As with any Clojure file when the REPL is connected:
; - `alt+enter` evaluates the current top level form.
; - `ctrl+enter` evaluates the current form.
; Special for this file:
; - `alt+up` and `alt+down` traverse up and down the REPL command history
;    when the cursor is after the last contents at the prompt
; 
; See also the Calva Inspector: https://calva.io/inspector/

PLEASE NOTE
We will update the default location of this file.
The new default location will be
  "<projectRootPath>/.calva/repl.calva-repl"
For now the legacy path is used by default.
To give yourself a smooth transition, you can opt in
to the change, by configuring this setting as false:
  "calva.useLegacyReplWindowPath"
and then add "**/.calva/repl.calva-repl" to your ".gitignore" file.


This file is configured as the output destination for all REPL output.
You can configure this with the setting:
  "calva.outputDestinations"


; Jacking in...
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Starting Jack-in: (cd /home/dunja/tools_methods_project; lein update-in :dependencies conj '[nrepl,"1.1.1"]' -- update-in :plugins conj '[cider/cider-nrepl,"0.47.1"]' -- update-in '[:repl-options,:nrepl-middleware]' conj '["cider.nrepl/cider-middleware"]' -- with-profile +dev repl :headless)
; Using host:port 127.0.0.1:46417 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉tools-methods-project.core꞉> 
"Please see https://calva.io/output/#about-stdout-in-the-repl-window
about why stdout printed to this file is prepended with `;` to be line comments."
clj꞉tools-methods-project.core꞉> 
; Jack-in done.
clj꞉tools-methods-project.core꞉> 
; Evaluating file: symptom_checker.clj
#'tools-methods-project.symptom-checker/check-symptoms
clj꞉tools-methods-project.symptom-checker꞉> 
; Evaluating file: symptom_checker.clj
#'tools-methods-project.symptom-checker/check-symptoms
clj꞉tools-methods-project.symptom-checker꞉> (check-symptoms ["fever"])
nil
clj꞉tools-methods-project.symptom-checker꞉> 
#'tools-methods-project.symptom-checker/symptom-disease-map
clj꞉tools-methods-project.symptom-checker꞉> 
#'tools-methods-project.symptom-checker/disease-specialist-map
clj꞉tools-methods-project.symptom-checker꞉> 
#'tools-methods-project.symptom-checker/predict-diagnoses
clj꞉tools-methods-project.symptom-checker꞉> 
#'tools-methods-project.symptom-checker/recommend-specialists
clj꞉tools-methods-project.symptom-checker꞉> 
#'tools-methods-project.symptom-checker/check-symptoms
clj꞉tools-methods-project.symptom-checker꞉> (check-symptoms ["fever"])
{:diagnoses ("Flu" "COVID-19"), :specialists ("General Practitioner" "Infectious Disease Specialist")}
clj꞉tools-methods-project.symptom-checker꞉> 
true
clj꞉tools-methods-project.symptom-checker-test꞉> 
; Evaluating file: symptom_checker_test.clj
; 
; FAIL about `check-symptoms` - it combines predictions and recommendations at (symptom_checker_test.clj:20)
; Expected:
; {:diagnoses #<clojure.lang.AFunction$1@322ffa4e>
;  :specialists #<clojure.lang.AFunction$1@4e395097>}
; Actual:
; {:diagnoses ("Flu" "COVID-19" "Bronchitis")
;  :specialists ("General Practitioner"
;                "Infectious Disease Specialist"
;                "Pulmologist")}
; Diffs: in [:diagnoses] expected #function[clojure.lang.AFunction/1], was ("Flu" "COVID-19" "Bronchitis")
;               in [:specialists] expected #function[clojure.lang.AFunction/1], was ("General Practitioner" "Infectious Disease Specialist" "Pulmologist")
false
clj꞉tools-methods-project.symptom-checker-test꞉> 
true
clj꞉tools-methods-project.symptom-checker-test꞉> 
; Evaluating file: symptom_checker_test.clj
; 
; FAIL about `check-symptoms` - it combines predictions and recommendations at (symptom_checker_test.clj:20)
; Expected:
; {:diagnoses #<clojure.lang.AFunction$1@405a891d>
;  :specialists #<clojure.lang.AFunction$1@5de44c60>}
; Actual:
; {:diagnoses ("Flu" "COVID-19" "Bronchitis")
;  :specialists ("General Practitioner"
;                "Infectious Disease Specialist"
;                "Pulmologist")}
; Diffs: in [:diagnoses] expected #function[clojure.lang.AFunction/1], was ("Flu" "COVID-19" "Bronchitis")
;               in [:specialists] expected #function[clojure.lang.AFunction/1], was ("General Practitioner" "Infectious Disease Specialist" "Pulmologist")
false
clj꞉tools-methods-project.symptom-checker-test꞉> 
; Evaluating file: symptom_checker_test.clj
; 
; FAIL about `check-symptoms` - User wants to combine predictions and recommendations at (symptom_checker_test.clj:21)
; Expected:
; {:diagnoses #<clojure.lang.AFunction$1@5fb7c217>
;  :specialists #<clojure.lang.AFunction$1@1d1935e9>}
; Actual:
; {:diagnoses ("Flu" "COVID-19" "Bronchitis")
;  :specialists ("General Practitioner"
;                "Infectious Disease Specialist"
;                "Pulmologist")}
; Diffs: in [:diagnoses] expected #function[clojure.lang.AFunction/1], was ("Flu" "COVID-19" "Bronchitis")
;               in [:specialists] expected #function[clojure.lang.AFunction/1], was ("General Practitioner" "Infectious Disease Specialist" "Pulmologist")
false
clj꞉tools-methods-project.symptom-checker-test꞉> 
; Evaluating file: personalized_treatment_test.clj
; 
; ; clj  tools-methods-project.personalized-treatment-test 
; Syntax error compiling at (test/tools_methods_project/personalized_treatment_test.clj:10:14).
; Unable to resolve symbol: generate-recommendations in this context
; Evaluation of file personalized_treatment_test.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉tools-methods-project.personalized-treatment-test꞉> 
; Evaluating file: symptom_checker.clj
#'tools-methods-project.symptom-checker/check-symptoms
clj꞉tools-methods-project.symptom-checker꞉> 
; Evaluating file: symptom_checker.clj
#'tools-methods-project.symptom-checker/check-symptoms
clj꞉tools-methods-project.symptom-checker꞉> 
; Evaluating file: symptom_checker_test.clj
; 
; FAIL about `predict-diagnoses` - User wants to know his diagnosis based on input symptoms at (symptom_checker_test.clj:9)
; Actual result did not agree with the checking function.
; Actual result:
; ("Flu" "COVID-19")
; Checking function: (contains ["Flu" "COVID-19" "Bronchitis"])
;     The checker said this about the reason:
;         Best match found: ["Flu" "COVID-19"]
; 
; FAIL about `check-symptoms` - User wants to combine predictions and recommendations at (symptom_checker_test.clj:21)
; Expected:
; {:diagnoses #<clojure.lang.AFunction$1@32834107>
;  :specialists #<clojure.lang.AFunction$1@3d260ca8>}
; Actual:
; {:diagnoses ("Flu" "COVID-19" "Bronchitis")
;  :specialists ("General Practitioner"
;                "Infectious Disease Specialist"
;                "Pulmologist")}
; Diffs: in [:diagnoses] expected #function[clojure.lang.AFunction/1], was ("Flu" "COVID-19" "Bronchitis")
;               in [:specialists] expected #function[clojure.lang.AFunction/1], was ("General Practitioner" "Infectious Disease Specialist" "Pulmologist")
false
clj꞉tools-methods-project.symptom-checker-test꞉> 
; 
; FAIL User wants to know his diagnosis based on input symptoms at (symptom_checker_test.clj:9)
; Actual result did not agree with the checking function.
; Actual result:
; ("Flu" "COVID-19")
; Checking function: (contains ["Flu" "COVID-19" "Bronchitis"])
;     The checker said this about the reason:
;         Best match found: ["Flu" "COVID-19"]
; Syntax error reading source at (REPL:11:61).
; Unmatched delimiter: )
clj꞉tools-methods-project.symptom-checker-test꞉> 
; 
; FAIL User wants to know his diagnosis based on input symptoms at (symptom_checker_test.clj:9)
; Actual result did not agree with the checking function.
; Actual result:
; ("Flu" "COVID-19")
; Checking function: (contains ["Flu" "COVID-19" "Bronchitis"])
;     The checker said this about the reason:
;         Best match found: ["Flu" "COVID-19"]
; Syntax error reading source at (REPL:11:61).
; Unmatched delimiter: )
clj꞉tools-methods-project.symptom-checker-test꞉> 
; 
; FAIL about `predict-diagnoses` - User wants to know his diagnosis based on input symptoms at (symptom_checker_test.clj:9)
; Actual result did not agree with the checking function.
; Actual result:
; ("Flu" "COVID-19")
; Checking function: (contains ["Flu" "COVID-19" "Bronchitis"])
;     The checker said this about the reason:
;         Best match found: ["Flu" "COVID-19"]
false
clj꞉tools-methods-project.symptom-checker-test꞉> 
; Evaluating file: symptom_checker_test.clj
; 
; FAIL about `check-symptoms` - User wants to combine predictions and recommendations at (symptom_checker_test.clj:21)
; Expected:
; {:diagnoses #<clojure.lang.AFunction$1@1697a9ab>
;  :specialists #<clojure.lang.AFunction$1@13f5ab29>}
; Actual:
; {:diagnoses ("Flu" "COVID-19" "Bronchitis")
;  :specialists ("General Practitioner"
;                "Infectious Disease Specialist"
;                "Pulmologist")}
; Diffs: in [:diagnoses] expected #function[clojure.lang.AFunction/1], was ("Flu" "COVID-19" "Bronchitis")
;               in [:specialists] expected #function[clojure.lang.AFunction/1], was ("General Practitioner" "Infectious Disease Specialist" "Pulmologist")
false
clj꞉tools-methods-project.symptom-checker-test꞉> 
true
clj꞉tools-methods-project.symptom-checker-test꞉> 
; Evaluating file: symptom_checker.clj
#'tools-methods-project.symptom-checker/check-symptoms
clj꞉tools-methods-project.symptom-checker꞉> 
; Evaluating file: healthcare_chatbot.clj
#'tools-methods-project.healthcare-chatbot/faq-db
clj꞉tools-methods-project.healthcare-chatbot꞉> 
; Evaluating file: healthcare_chatbot.clj
#'tools-methods-project.healthcare-chatbot/answer-faq
clj꞉tools-methods-project.healthcare-chatbot꞉> 
; Evaluating file: healthcare_chatbot.clj
#'tools-methods-project.healthcare-chatbot/answer-faq
clj꞉tools-methods-project.healthcare-chatbot꞉> 
#'tools-methods-project.healthcare-chatbot/faq-db
clj꞉tools-methods-project.healthcare-chatbot꞉> 
#'tools-methods-project.healthcare-chatbot/answer-faq
clj꞉tools-methods-project.healthcare-chatbot꞉> (answer-faq ["What is flu?"])
"I'm sorry, I don't have an answer to that question."
clj꞉tools-methods-project.healthcare-chatbot꞉> (answer-faq "What is flu?")
"Flu is a viral infection that attacks your respiratory system."
clj꞉tools-methods-project.healthcare-chatbot꞉> 
; Evaluating file: healthcare_chatbot_test.clj
true
clj꞉tools-methods-project.healthcare-chatbot-test꞉> 
nil
clj꞉tools-methods-project.healthcare-chatbot-test꞉> 
true
clj꞉tools-methods-project.healthcare-chatbot-test꞉> 
; Evaluating file: healthcare_chatbot_test.clj
; 
; FAIL about `answer-faq` - it returns the correct answer for a known question at (healthcare_chatbot_test.clj:7)
; Expected:
; "Flu is a viral infection that attacks your respiratory system."
; Actual:
; "I'm sorry, I don't have an answer to that question."
; Diffs: strings have 1 difference (1% similarity)
;                 expected: "(Flu is a viral infection that attacks your respiratory system)."
;                 actual:   "(I'm sorry, I don't have an answer to that question-----------)."
false
clj꞉tools-methods-project.healthcare-chatbot-test꞉> 
; 
; FAIL about `answer-faq` - it returns the correct answer for a known question at (healthcare_chatbot_test.clj:7)
; Expected:
; "Flu is a viral infection that attacks your respiratory system."
; Actual:
; "I'm sorry, I don't have an answer to that question."
; Diffs: strings have 1 difference (1% similarity)
;                 expected: "(Flu is a viral infection that attacks your respiratory system)."
;                 actual:   "(I'm sorry, I don't have an answer to that question-----------)."
false
clj꞉tools-methods-project.healthcare-chatbot-test꞉> 
; Evaluating file: healthcare_chatbot_test.clj
true
clj꞉tools-methods-project.healthcare-chatbot-test꞉> 
true
clj꞉tools-methods-project.healthcare-chatbot-test꞉> 
; Evaluating file: healthcare_chatbot.clj
#'tools-methods-project.healthcare-chatbot/answer-faq
clj꞉tools-methods-project.healthcare-chatbot꞉> 
; Evaluating file: symptom_checker.clj
#'tools-methods-project.symptom-checker/check-symptoms
clj꞉tools-methods-project.symptom-checker꞉> 
; Evaluating file: symptom_checker.clj
#'tools-methods-project.symptom-checker/check-symptoms
clj꞉tools-methods-project.symptom-checker꞉> 
